<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Controller Thread Group">
        <intProp name="ThreadGroup.num_threads">2000</intProp>
        <intProp name="ThreadGroup.ramp_time">100</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.protocol.tcp.sampler.TCPSampler

String hostname = &quot;localhost&quot;
int port = 2404
byte[] byteArray = [0x68, 0x02, 0x02, 0x68, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x16] as byte[]

try {
    def socket = new Socket(hostname, port)
    try {
        // Send request
        def out = socket.getOutputStream()
        out.write(byteArray)
        out.flush()
        
        // Receive response
        def in = socket.getInputStream()
        byte[] response = new byte[1024]
        int bytesRead = in.read(response)
        
        if (bytesRead == -1) {
            log.warn(&quot;No data received from server&quot;)
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage(&quot;No response received from server&quot;)
        } else {
            String responseStr = new String(response, 0, bytesRead)
            log.info(&quot;Received: &quot; + responseStr)
            SampleResult.setResponseData(responseStr, &quot;UTF-8&quot;)
            SampleResult.setSuccessful(true)
        }
    } catch (Exception e) {
        log.error(&quot;Error during communication: &quot; + e.getMessage(), e)
        SampleResult.setSuccessful(false)
        SampleResult.setResponseMessage(e.getMessage())
    } finally {
        socket.close()
    }
} catch (ConnectException e) {
    log.error(&quot;Connection failed: &quot; + e.getMessage(), e)
    SampleResult.setSuccessful(false)
    SampleResult.setResponseMessage(&quot;Connection failed: &quot; + e.getMessage())
}
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scada Thread Group">
        <intProp name="ThreadGroup.num_threads">2000</intProp>
        <intProp name="ThreadGroup.ramp_time">100</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import org.apache.jmeter.protocol.tcp.sampler.TCPSampler

String hostname = &quot;localhost&quot;
int port = 2404
byte[] byteArray = [0x68, 0x02, 0x02, 0x68, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x16] as byte[]

try {
    def socket = new Socket(hostname, port)
    try {
        // Send request
        def out = socket.getOutputStream()
        out.write(byteArray)
        out.flush()
        
        // Receive response
        def in = socket.getInputStream()
        byte[] response = new byte[1024]
        int bytesRead = in.read(response)
        
        if (bytesRead == -1) {
            log.warn(&quot;No data received from server&quot;)
            SampleResult.setSuccessful(false)
            SampleResult.setResponseMessage(&quot;No response received from server&quot;)
        } else {
            String responseStr = new String(response, 0, bytesRead)
            log.info(&quot;Received: &quot; + responseStr)
            SampleResult.setResponseData(responseStr, &quot;UTF-8&quot;)
            SampleResult.setSuccessful(true)
        }
    } catch (Exception e) {
        log.error(&quot;Error during communication: &quot; + e.getMessage(), e)
        SampleResult.setSuccessful(false)
        SampleResult.setResponseMessage(e.getMessage())
    } finally {
        socket.close()
    }
} catch (ConnectException e) {
    log.error(&quot;Connection failed: &quot; + e.getMessage(), e)
    SampleResult.setSuccessful(false)
    SampleResult.setResponseMessage(&quot;Connection failed: &quot; + e.getMessage())
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
